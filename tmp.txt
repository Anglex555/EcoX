import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QPushButton, QMessageBox, QVBoxLayout, QHBoxLayout, QTabWidget, QTabBar, QGroupBox, QTableWidget, QTableWidgetItem, QComboBox
from PyQt5.QtGui import QIcon, QPixmap, QFont
from PyQt5.QtCore import Qt

import sqlite3

class LoginWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.title = 'Login'
        self.width = 900
        self.height = 600
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setFixedSize(self.width, self.height)

        # White Block with Rounded Corners
        self.white_block = QWidget(self)
        self.white_block.setFixedSize(300, 200)
        self.white_block.setStyleSheet("background-color: white; border-radius: 15px;")
        self.white_block_layout = QVBoxLayout(self.white_block)
        self.white_block_layout.setAlignment(Qt.AlignCenter)

        # Username Input
        self.usernameLabel = QLabel('Username:', self.white_block)
        self.usernameInput = QLineEdit(self.white_block)
        self.usernameLabel.setStyleSheet("font-size: 16px; color: #333;")
        self.usernameInput.setStyleSheet("font-size: 14px; padding: 8px; border-radius: 5px; border: 1px solid #ccc;")

        # Password Input
        self.passwordLabel = QLabel('Password:', self.white_block)
        self.passwordInput = QLineEdit(self.white_block)
        self.passwordInput.setEchoMode(QLineEdit.Password)
        self.passwordLabel.setStyleSheet("font-size: 16px; color: #333;")
        self.passwordInput.setStyleSheet("font-size: 14px; padding: 8px; border-radius: 5px; border: 1px solid #ccc;")

        # Login Button
        self.loginButton = QPushButton('Login', self.white_block)
        self.loginButton.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                padding: 10px 24px;
                border-radius: 6px;
                background-color: #4CAF50;
                border: none;
                color: white;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.loginButton.clicked.connect(self.login)

        # Add Widgets to White Block Layout
        self.white_block_layout.addWidget(self.usernameLabel)
        self.white_block_layout.addWidget(self.usernameInput)
        self.white_block_layout.addWidget(self.passwordLabel)
        self.white_block_layout.addWidget(self.passwordInput)
        self.white_block_layout.addWidget(self.loginButton)

        # Main Layout
        layout = QVBoxLayout()
        layout.addWidget(self.white_block, alignment=Qt.AlignCenter)
        self.setLayout(layout)

        # Attempts and Timer Setup
        self.attempts = 3

    def login(self):
        username = self.usernameInput.text()
        password = self.passwordInput.text()
        if self.checkCredentials(username, password):
            self.openMainMenu(username)
        else:
            self.attempts -= 1
            if self.attempts == 0:
                self.loginButton.setEnabled(False)
            QMessageBox.warning(self, 'Error', f'Invalid credentials. {self.attempts} attempts left.')

    def checkCredentials(self, username, password):
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        result = c.fetchone()
        conn.close()
        if result:
            return True
        return False

    def openMainMenu(self, username):
        self.mainMenu = MainMenu(username)
        self.mainMenu.show()
        self.close()


class MainMenu(QWidget):
    def __init__(self, username):
        super().__init__()
        self.title = 'EcoX'
        self.width = 900
        self.height = 600
        self.username = username
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setFixedSize(self.width, self.height)

        # Create Tabs
        self.tabs = QTabWidget(self)

        # Tab Bar Styling
        self.tab_bar = self.tabs.tabBar()
        self.tab_bar.setStyleSheet("""
            QTabBar::tab {
                background: #f0f0f0;
                border: 1px solid #ccc;
                border-bottom-color: #aaa;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                min-width: 50px;
                padding: 8px;
                margin-right: 2px;
                color: #333;
            }
            QTabBar::tab:selected {
                background: #4CAF50;
                color: white;
            }
        """)

        # Add Tabs
        self.tab1 = QWidget()
        self.tabs.addTab(self.tab1, "Главная")
        self.initTab1()

        self.tab2 = QWidget()
        self.tabs.addTab(self.tab2, "Разработка")
        self.initTab2()

        self.tab3 = QWidget()
        self.tabs.addTab(self.tab3, "Этапы разработки")
        self.initTab3()

        self.tab4 = QWidget()
        self.tabs.addTab(self.tab4, "Прайс лист")
        self.initTab4()

        self.tab5 = QWidget()
        self.tabs.addTab(self.tab5, "Аккаунт")
        self.initTab5()

        # Main Layout
        layout = QVBoxLayout()
        layout.addWidget(self.tabs)
        self.setLayout(layout)

    def initTab1(self):
        layout = QVBoxLayout()

        info_label = QLabel("Добро пожаловать в EcoX!\nУвеличьте свою эффективность вместе с EcoX!\n\n"
                            "EcoX Enterprise Automation\n\n"
                            "EcoX - это современная платформа для автоматизации предприятия.\n"
                            "Мы предлагаем широкий спектр решений для оптимизации бизнес-процессов и повышения эффективности работы.\n"
                            "Наши продукты включают в себя системы управления складом, производством, закупками и продажами.\n\n"
                            "Мы стремимся к инновациям и созданию удобных и гибких инструментов для бизнеса.\n"
                            "Присоединяйтесь к нам уже сегодня и увеличьте свою эффективность вместе с EcoX!")
        info_label.setStyleSheet("font-size: 16px;")
        layout.addWidget(info_label)

        # Add Images
        image_layout = QHBoxLayout()
        for i in range(3):
            image_label = QLabel(self)
            pixmap = QPixmap(f"image{i+1}.jpg").scaledToWidth(200)
            image_label.setPixmap(pixmap)
            image_layout.addWidget(image_label)
        layout.addLayout(image_layout)

        # Set Tab1 Layout
        self.tab1.setLayout(layout)

    def initTab2(self):
        layout = QVBoxLayout()

        # Создаем список комплектующих для выбора
        components = [
            'Сенсор для определения преград',
            'Оперативная память',
            'Сенсор для определения температуры',
            'Комплект колес 6 шт',
            'Корпус',
            'Двигатель'
        ]

        # Создаем выпадающие списки для каждого комплектующего
        self.component_dropdowns = []

        for component in components:
            group_box = QGroupBox(component)
            group_box_layout = QVBoxLayout()

            # Создаем выпадающий список для комплектующего
            dropdown = QComboBox()
            dropdown.addItem("Выбрать компонент")
            self.populateDropdown(dropdown, component)

            group_box_layout.addWidget(dropdown)
            group_box.setLayout(group_box_layout)
            layout.addWidget(group_box)

            # Добавляем выпадающий список в список для дальнейшей обработки
            self.component_dropdowns.append(dropdown)

        # Создаем кнопку для начала процесса разработки
        start_button = QPushButton("Начать разработку")
        start_button.clicked.connect(self.startDevelopmentProcess)
        layout.addWidget(start_button)

        self.tab2.setLayout(layout)

    def initTab2(self):
        layout = QVBoxLayout()

        # Добавляем надпись "Этап 1"
        stage_label = QLabel("Этап 1", self)
        stage_label.setStyleSheet("font-size: 20px; color: #333; font-weight: bold;")
        layout.addWidget(stage_label, alignment=Qt.AlignCenter)

        # Создаем список комплектующих для выбора
        components = [
            'Сенсоры для определения преград',
            'Оперативная память',
            'Сенсоры для определения температуры',
            'Колеса',
            'Корпус',
            'Двигатель'
        ]

        # Создаем выпадающие списки для каждого комплектующего
        self.component_dropdowns = []

        for component in components:
            group_box = QGroupBox(component)
            group_box_layout = QVBoxLayout()

            # Создаем выпадающий список для комплектующего
            dropdown = QComboBox()
            dropdown.addItem("Выбрать компонент")
            self.populateDropdown(dropdown, component)

            group_box_layout.addWidget(dropdown)
            group_box.setLayout(group_box_layout)
            layout.addWidget(group_box)

            # Добавляем выпадающий список в список для дальнейшей обработки
            self.component_dropdowns.append(dropdown)

        # Создаем кнопку для начала процесса разработки
        start_button = QPushButton("Завершить Этап I.", self)
        start_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                padding: 10px 24px;
                border-radius: 6px;
                background-color: #4CAF50;
                border: none;
                color: white;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        start_button.clicked.connect(self.startDevelopmentProcess)
        layout.addWidget(start_button, alignment=Qt.AlignCenter)

        self.tab2.setLayout(layout)

        
    def populateDropdown(self, dropdown, component_type):
        # Получаем данные о комплектующих из базы данных
        conn = sqlite3.connect('robots.db')
        c = conn.cursor()
        c.execute("SELECT name FROM components WHERE type=?", (component_type,))
        components = c.fetchall()
        conn.close()

        # Добавляем полученные компоненты в выпадающий список
        for component in components:
            dropdown.addItem(component[0])

    def startDevelopmentProcess(self):
        username = self.username

        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT role FROM users WHERE username=?", (username,))
        user_role = c.fetchone()[0]
        conn.close()

        if user_role == "Engineer":
            selected_components = [dropdown.currentText() for dropdown in self.component_dropdowns]

            if "Выбрать компонент" in selected_components:
                QMessageBox.warning(self, 'Предупреждение', 'Пожалуйста, выберите комплектующие для каждого поля.')
                return
            
            self.initTab2_2()
        else:
            QMessageBox.warning(self, 'Ошибка', 'Только инженер может запускать этот процесс.')

    def initTab2_2(self):
        
        layout = QVBoxLayout()

        # Добавляем надпись "2 этап"
        stage_label = QLabel("2 этап", self)
        stage_label.setStyleSheet("font-size: 20px; color: #333; font-weight: bold;")
        layout.addWidget(stage_label, alignment=Qt.AlignCenter)

        # Добавляем описание второго этапа
        description_label = QLabel("Сборка опытного образца", self)
        description_label.setStyleSheet("font-size: 16px; color: #333;")
        layout.addWidget(description_label, alignment=Qt.AlignCenter)

        # Создаем кнопки для завершения второго этапа
        successful_button = QPushButton("Модель успешна", self)
        successful_button.clicked.connect(self.startDevelopmentProcess2)
        successful_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                padding: 10px 24px;
                border-radius: 6px;
                background-color: #4CAF50;
                border: none;
                color: white;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        layout.addWidget(successful_button, alignment=Qt.AlignCenter)

        unsuccessful_button = QPushButton("Модель не успешна", self)
        unsuccessful_button.clicked.connect(self.initTab2)
        unsuccessful_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                padding: 10px 24px;
                border-radius: 6px;
                background-color: #FF5733;
                border: none;
                color: white;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #FF5733;
            }
        """)
        layout.addWidget(unsuccessful_button, alignment=Qt.AlignCenter)

        self.tab2.setLayout(layout)

    def startDevelopmentProcess2(self):
        username = self.username

        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("SELECT role FROM users WHERE username=?", (username,))
        user_role = c.fetchone()[0]
        conn.close()

        if user_role == "Engineer":
            selected_components = [dropdown.currentText() for dropdown in self.component_dropdowns]

            if "Выбрать компонент" in selected_components:
                QMessageBox.warning(self, 'Предупреждение', 'Пожалуйста, выберите комплектующие для каждого поля.')
                return
            
            self.initTab2_2()
        else:
            QMessageBox.warning(self, 'Ошибка', 'Только инженер может запускать этот процесс.')

    def initTab3(self):
        layout = QVBoxLayout()

        process_stages = [
            ("Этап I. Проектирование модели", "Инженер", "\nНа данном этапе проводится проектирование модели доставщика.", "Проектирование модели – занимаются инженеры."),
            ("Этап II. Сборка опытного образца", "Руководитель производства", "\nНа данном этапе собирается опытный образец доставщика. Если есть замечания, они отправляются инженерам.", "Сборка опытного образца – этим занимаются специалисты отдела производства. Если в процессе сборки появляются замечания к образцу модели, то они отправляются инженерам и процесс начинается заново. Если сборка прошла успешно, то осуществляется переход на следующий этап."),
            ("Этап III. Тестирование опытного образца", "Тестировщик", "\nНа данном этапе происходит тестирование опытного образца доставщика. Если есть замечания, они отправляются инженерам.", "Тестирование опытного образца – специалисты отдела тестирования. Если в процессе тестирования появляются замечания к образцу модели, то они отправляются инженерам и процесс начинается заново. Если тестирование прошло успешно, то осуществляется переход на следующий этап."),
            ("Этап IV. Утверждение в серийный выпуск", "Руководитель отдела производства", "\nНа данном этапе утверждается технологическая карта доставщика и его вводится в серийное производство.", "Утверждение нового робота в серийный выпуск. На данном этапе происходит утверждение технологической карты доставщика и ввод его в серийное производство."),
            ("Этап V. Расчет цены и добавление в прайс-лист", "Руководитель отдела продаж", "\nНа данном этапе устанавливается цена на доставщика и его добавляется в прайс-лист.", "Расчет цены на робота и добавление стоимости в прайс-лист. После утверждения на всех этапах для доставщика необходимо установить цену.")
        ]

        for stage, role, description, full_description in process_stages:
            stage_group = QGroupBox(stage)
            stage_group.setStyleSheet("""
                QGroupBox {
                    font-size: 16px;
                    border: 2px solid #4CAF50;
                    border-radius: 10px;
                    margin-top: 10px;
                }
                QGroupBox::title {
                    subcontrol-origin: margin;
                    subcontrol-position: top center;
                    padding: 5px;
                    background-color: #4CAF50;
                    color: white;
                    border: 1px solid #4CAF50;
                    border-top-left-radius: 8px;
                    border-top-right-radius: 8px;
                }
            """)
            stage_layout = QVBoxLayout()
            stage_label = QLabel(description)
            stage_label.setStyleSheet("font-size: 14px;")
            stage_layout.addWidget(stage_label)
            stage_group.setLayout(stage_layout)

            # Добавляем раскрываемый виджет для детальной информации о каждом этапе
            expand_button = QPushButton("Подробнее")
            expand_button.setStyleSheet("""
                QPushButton {
                    color: blue;
                    border: none;
                    text-decoration: underline;
                    font-size: 14px;
                }
                QPushButton:hover {
                    color: navy;
                }
            """)
            expand_button.clicked.connect(lambda _, desc=full_description: QMessageBox.information(self, "Подробности", desc))
            stage_layout.addWidget(expand_button)

            layout.addWidget(stage_group)

        self.tab3.setLayout(layout)

    def initTab4(self):
        layout = QVBoxLayout()

        # Create Price List Table
        price_list_table = QTableWidget()
        price_list_table.setColumnCount(3)
        price_list_table.setHorizontalHeaderLabels(["№", "Товар", "Цена"])

        # Retrieve data from the database for robots in serial production
        conn = sqlite3.connect('robots.db')
        c = conn.cursor()
        c.execute("SELECT * FROM robots WHERE status=?", ("В серийном производстве",))
        robots = c.fetchall()
        conn.close()

        # Fill in the price list table with robot data
        row_number = 0
        for robot in robots:
            row_number += 1
            number_item = QTableWidgetItem(str(row_number))
            name_item = QTableWidgetItem(robot[1])
            price_item = QTableWidgetItem(str(robot[2]))
            price_list_table.insertRow(row_number - 1)
            price_list_table.setItem(row_number - 1, 0, number_item)
            price_list_table.setItem(row_number - 1, 1, name_item)
            price_list_table.setItem(row_number - 1, 2, price_item)

        # Add Price List Table to Layout
        layout.addWidget(price_list_table)

        # Set Tab4 Layout
        self.tab4.setLayout(layout)


    def initTab5(self):
        layout = QVBoxLayout()

        # Account Information
        account_label = QLabel(self)
        account_label.setText(f"Вы вошли как: {self.username}")
        account_label.setStyleSheet("font-size: 16px;")
        layout.addWidget(account_label)

        # Logout Button
        logout_button = QPushButton('Logout', self)
        logout_button.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                padding: 10px 24px;
                border-radius: 6px;
                background-color: #4CAF50;
                border: none;
                color: white;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        logout_button.clicked.connect(self.logout)
        layout.addWidget(logout_button)

        # Set Tab4 Layout
        self.tab5.setLayout(layout)

    def logout(self):
        self.close()
        self.loginWindow = LoginWindow()
        self.loginWindow.show()


class App(QWidget):
    def __init__(self):
        super().__init__()
        self.title = 'EcoX Enterprise Automation'
        self.width = 900
        self.height = 600
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setFixedSize(self.width, self.height)

        # Show Login Window
        self.loginWindow = LoginWindow()
        self.loginWindow.show()

        # Create Database
        self.createDatabase()
        self.createRobotsDatabase()

    def createDatabase(self):
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (username TEXT PRIMARY KEY, password TEXT, role TEXT)''')
        c.execute('''INSERT OR IGNORE INTO users (username, password, role) VALUES 
                     ('admin', '11', 'Administrator'),
                     ('storekeeper', '11', 'Storekeeper'),
                     ('engineer', '11', 'Engineer'),
                     ('tester', '11', 'Tester'),
                     ('production_manager', '11', 'Production Manager'),
                     ('purchase_manager', '11', 'Purchase Manager'),
                     ('sales_manager', '11', 'Sales Manager')''')
        conn.commit()
        conn.close()

    def createRobotsDatabase(self):
        conn = sqlite3.connect('robots.db')
        c = conn.cursor()

        # Создание таблицы комплектующих
        c.execute('''CREATE TABLE IF NOT EXISTS components
                    (id INTEGER PRIMARY KEY,
                    name TEXT,
                    article TEXT,
                    type TEXT,
                    weight REAL,
                    production_date DATE)''')

        # Добавление данных о комплектующих
        components_data = [
            ("Сенсор для определения преград EC-23", "EC23-01", "Сенсоры для определения преград", 0.025, "17.08.2023"),
            ("Сенсор для определения преград ECPro-15", "ECPro15-01", "Сенсоры для определения преград", 0.023, "17.01.2022"),
            ("Сенсор для определения преград ECNorm-15", "ECNorm-15-01", "Сенсоры для определения преград", 0.30, "15.09.2023"),
            ("Сенсор для определения преград ECModern-95", "ECModern95-01", "Сенсоры для определения преград", 0.019, "01.02.2024"),
            ("Сенсор для определения преград EC-29", "EC29-01", "Сенсоры для определения преград", 0.027, "13.07.2023"),
            ("Оперативная память EC-OS-91", "ECOS91-01", "Оперативная память", 0.024, "25.05.2022"),
            ("Оперативная память EC-OS-125", "ECOS125-01", "Оперативная память", 0.030, "10.01.2021"),
            ("Оперативная память EC-OS-113", "ECOS113-01", "Оперативная память", 0.027, "02.03.2023"),
            ("Оперативная память EC-OS-99", "ECOS99-01", "Оперативная память", 0.020, "07.08.2022"),
            ("Оперативная память EC-OS-105", "ECOS105-01", "Оперативная память", 0.040, "15.01.2021"),
            ("Сенсор для определения температуры EC-Temp-50", "ECTemp50-01", "Сенсоры для определения температуры", 0.020, "03.09.2022"),
            ("Сенсор для определения температуры EC-Temp-47", "ECTemp47-01", "Сенсоры для определения температуры", 0.019, "01.03.2024"),
            ("Сенсор для определения температуры EC-Temp-54", "ECTemp54-01", "Сенсоры для определения температуры", 0.025, "10.12.2022"),
            ("Сенсор для определения температуры EC-Temp-59", "ECTemp59-01", "Сенсоры для определения температуры", 0.023, "25.02.2023"),
            ("Сенсор для определения температуры EC-Temp-57", "ECTemp57-01", "Сенсоры для определения температуры", 0.020, "23.01.2022"),
            ("Комплект колес 6 шт EC- wheels-15", "ECwheels15-01", "Колеса", 6.2, "07.02.2022"),
            ("Комплект колес 6 шт EC- wheels-23", "ECwheels23-01", "Колеса", 7.1, "15.08.2021"),
            ("Комплект колес 6 шт EC- wheels-50 (повышенной проходимости)", "ECwheels50-01", "Колеса", 10.1, "13.09.2023"),
            ("Комплект колес 6 шт EC- wheels-34", "ECwheels34-01", "Колеса", 5.6, "08.08.2023"),
            ("Комплект колес 6 шт EC- wheels-40", "ECwheels40-01", "Колеса", 4.9, "30.04.2022"),
            ("Комплект колес 6 шт EC- wheels-20", "ECwheels20-01", "Колеса", 6.3, "21.10.2023"),
            ("Корпус EC-body\\mach-34", "ECbodymach34-01", "Корпус", 15.4, "01.02.2021"),
            ("Корпус EC-body\\mach-25", "ECbodymach25-01", "Корпус", 18.2, "27.06.2022"),
            ("Корпус EC-body\\mach-47 (повышенной безопасности)", "ECbodymach47-01", "Корпус", 25.4, "23.03.2023"),
            ("Корпус EC-body\\mach-33", "ECbodymach33-01", "Корпус", 17.05, "21.09.2022"),
            ("Корпус EC-body\\mach-54 (повышенной безопасности)", "ECbodymach54-01", "Корпус", 24.25, "01.03.2023"),
            ("Корпус EC-body\\mach-33", "ECbody\\mach33-01", "Корпус", 20.04, "07.07.2022"),
            ("Двигатель EC- engine-05", "ECengine05-01", "Двигатель", 5.7, "01.03.2024"),
            ("Двигатель EC- engine-07", "ECengine07-01", "Двигатель", 8.1, "17.08.2023"),
            ("Двигатель EC- engine-11", "ECengine11-01", "Двигатель", 7.4, "03.09.2022"),
            ("Двигатель EC- engine-04", "ECengine04-01", "Двигатель", 6.8, "03.07.2023"),
            ("Двигатель EC- engine-09", "ECengine09-01", "Двигатель", 4.9, "31.01.2024"),
            ("Двигатель EC- engine-10", "ECengine10-01", "Двигатель", 5.7, "07.09.2023")
        ]


        for component in components_data:
            c.execute("INSERT INTO components (name, article, type, weight, production_date) VALUES (?, ?, ?, ?, ?)", component)

        # Создание таблицы роботов
        c.execute('''CREATE TABLE IF NOT EXISTS robots
                    (id INTEGER PRIMARY KEY,
                    name TEXT,
                    article TEXT,
                    type TEXT,
                    weight REAL,
                    production_date DATE,
                    status TEXT)''')

        # Добавление данных о роботах
        robots_data = [
            # Добавьте данные о роботах здесь
        ]

        for robot in robots_data:
            c.execute("INSERT INTO robots (name, article, type, weight, production_date, status) VALUES (?, ?, ?, ?, ?, ?)", robot)

        # Сохранение изменений и закрытие соединения
        conn.commit()
        conn.close()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
